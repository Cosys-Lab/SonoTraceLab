function structSurface = prepareMeshSurface( structMeshPreparation) 
    warning('off', 'MATLAB:MKDIR:DirectoryExists');
    
    % Load the mesh
    meshIn = stlreadNonCleaning( structMeshPreparation.fileNameMesh );
  
    % Clean some issues with the mesh, so it behaves nicer.
    meshClean = surfaceMesh(meshIn.vertices,meshIn.faces);
    removeDefects(meshClean,'duplicate-vertices');
    removeDefects(meshClean,'duplicate-faces');
    removeDefects(meshClean,'nonmanifold-edges');
    surfaceVerticesClean = meshClean.Vertices;
    
    indexesCleanToRawMesh = meshClean.Faces';
    indexesCleanToRawMesh = indexesCleanToRawMesh(:);
    surfaceVertices = surfaceVerticesClean( indexesCleanToRawMesh, : );
    surfaceFaces = reshape( 1:length(indexesCleanToRawMesh), 3, length(indexesCleanToRawMesh)/3 )';

    % Remove the mean
    surfaceVertices = surfaceVertices - mean( surfaceVertices );
    
    % Rotate and position the mesh
    rotMatMesh = rotz(structMeshPreparation.orientation(3) ) *  roty(structMeshPreparation.orientation(2) ) * rotx(structMeshPreparation.orientation(1) );
    surfaceVertices = surfaceVertices * rotMatMesh;
    surfaceVertices = surfaceVertices * structMeshPreparation.vertexScaling;
    surfaceVertices = surfaceVertices + structMeshPreparation.position;

    % Save the mesh in a local struct for normal calculation
    localStructSurface = struct();
    localStructSurface.faces = surfaceFaces;
    localStructSurface.vertices = surfaceVertices;
    surfaceNormals = patchnormals( localStructSurface );
    if( structMeshPreparation.FLIPNORMALS==1 )
        for cntNormal = 1 : size( surfaceNormals, 1 )
            surfaceNormals( cntNormal, : ) = -surfaceNormals( cntNormal, : ) / norm(  surfaceNormals( cntNormal, : ) );
        end
    else
        for cntNormal = 1 : size( surfaceNormals, 1 )
            surfaceNormals( cntNormal, : ) = surfaceNormals( cntNormal, : ) / norm(  surfaceNormals( cntNormal, : ) );
        end
    end

    
    % Setup the frequency response of the reflectivity
    nFreqsSim = length( structMeshPreparation.vecFreqSim );
    
    hashOfMeshIn = DataHash( meshIn );
    filenameCurvatureStruct = [ 'Data/CurvatureStorage/' hashOfMeshIn '.mat' ];
    if( structMeshPreparation.precomputeCurvature == 1 )
        

    FV = struct();
    FV.faces = meshClean.Faces;
    FV.vertices = meshClean.Vertices;
    [PrincipalCurvatures,PrincipalDir1,PrincipalDir2,FaceCMatrix,VertexCMatrix,Cmagnitude]= GetCurvatures( FV ,0);
    structCurvature = struct();
    structCurvature.PrincipalCurvatures = PrincipalCurvatures;
    structCurvature.PrincipalDir1 = PrincipalDir1;
    structCurvature.PrincipalDir2 = PrincipalDir2;
    structCurvature.FaceCMatrix = FaceCMatrix;
    structCurvature.VertexCMatrix = VertexCMatrix;
    structCurvature.Cmagnitude = Cmagnitude;

    curvatureMagnitudeClean = sqrt( sum( PrincipalCurvatures.^2) );
    curvatureMagnitude = curvatureMagnitudeClean( indexesCleanToRawMesh );
    
    surfaceBRDF = zeros( size( surfaceVertices, 1), nFreqsSim );
    for cntFreq = 1 : nFreqsSim
        BRDFTransitionPosition = structMeshPreparation.BRDFTransitionPosition;
        BRDFTransitionSlope = structMeshPreparation.BRDFTransitionSlope;
        BRDFExponentSpecular = structMeshPreparation.BRDFExponentSpecular( cntFreq );
        BRDFExponentDiffractive = structMeshPreparation.BRDFExponentDiffractive( cntFreq );
        surfaceBRDF( :, cntFreq ) = mixSigmoidProperties( curvatureMagnitude, BRDFTransitionSlope, BRDFTransitionPosition, BRDFExponentDiffractive, BRDFExponentSpecular );
    end

    surfaceMaterial =  zeros( size( surfaceVertices, 1), nFreqsSim );
    for cntFreq = 1 : nFreqsSim
        materialTransitionPosition =structMeshPreparation.materialSTransitionPosition;
        materialTransitionSlope = structMeshPreparation.materialSTransitionSlope;
        materialStrengthSpecular = structMeshPreparation.materialStrengthSpecular( cntFreq );
        materialStrengthDiffrative = structMeshPreparation.materialStrengthDiffractive( cntFreq );
        surfaceMaterial( :, cntFreq ) = mixSigmoidProperties( curvatureMagnitude, materialTransitionSlope, materialTransitionPosition, materialStrengthDiffrative, materialStrengthSpecular );
    end
    % 
    % facesBRDF = zeros( size( surfaceFaces, 1 ), nFreqsSim );
    % facesMaterial = zeros( size( surfaceFaces, 1 ), nFreqsSim );
    % for cntFreq = 1 : nFreqsSim
    %      facesBRDF( :, cntFreq ) = mean( [ BRDF(surfaceFaces(:,1),cntFreq) BRDF(surfaceFaces(:,2),cntFreq) BRDF(surfaceFaces(:,3),cntFreq) ],2);
    %      facesMaterial( :, cntFreq ) = mean( [ surfaceMaterial(surfaceFaces(:,1),cntFreq) surfaceMaterial(surfaceFaces(:,2),cntFreq) surfaceMaterial(surfaceFaces(:,3),cntFreq) ],2);
    % end

    FVPlot = struct();
    FVPlot.faces = surfaceFaces;
    FVPlot.vertices = surfaceVertices;
    figure(132);
    clf
        subplot(1,2,1)
            colormap cool
            mesh_h=patch(FVPlot,'FaceVertexCdata',surfaceBRDF(:,1),'edgecolor', 'interp', 'facecolor','interp','EdgeAlpha',0.2);
            %set some visualization properties
            set(mesh_h,'ambientstrength',0.35);
            axis off
            view([-45,35.2]);
            camlight();
            lighting phong
            colorbar();
            axis equal
            view( [47.0033   -4.3524]);
        subplot(1,2,2)
            colormap cool
            mesh_h=patch(FVPlot,'FaceVertexCdata',surfaceMaterial(:,1),'facecolor','flat','EdgeAlpha',0.2);
            %set some visualization properties
            set(mesh_h,'ambientstrength',0.35);
            axis off
            view([-45,35.2]);
            camlight();
            lighting phong
            colorbar();
            axis equal
            view( [47.0033   -4.3524]);            



    % Material properties: a strength for specular behavior, and one for diffractive

    
    % And now we store the surface mesh into the struct.
    structSurface = struct();
    structSurface.surfaceVertices = surfaceVertices;
    structSurface.surfaceFaces = surfaceFaces;
    structSurface.surfaceNormals = surfaceNormals;
    structSurface.surfaceMaterial = surfaceMaterial;
    structSurface.BRDF = surfaceBRDF;
    structSurface.vecFreqSim = structMeshPreparation.vecFreqSim;

    structSurface.structMeshPreparation = structMeshPreparation;


end